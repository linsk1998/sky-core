QUnit.test('Math.imul', assert => {
  assert.isFunction(Math.imul);
  assert.name(Math.imul, 'imul');
  assert.arity(Math.imul, 2);
  assert.looksNative(Math.imul);
  // assert.nonEnumerable(Math, 'imul');
  assert.same(Math.imul(0, 0), 0);
  assert.strictEqual(Math.imul(123, 456), 56088);
  assert.strictEqual(Math.imul(-123, 456), -56088);
  assert.strictEqual(Math.imul(123, -456), -56088);
  assert.strictEqual(Math.imul(19088743, 4275878552), 602016552);
  assert.same(Math.imul(false, 7), 0);
  assert.same(Math.imul(7, false), 0);
  assert.same(Math.imul(false, false), 0);
  assert.strictEqual(Math.imul(true, 7), 7);
  assert.strictEqual(Math.imul(7, true), 7);
  assert.strictEqual(Math.imul(true, true), 1);
  assert.same(Math.imul(undefined, 7), 0);
  assert.same(Math.imul(7, undefined), 0);
  assert.same(Math.imul(undefined, undefined), 0);
  assert.same(Math.imul('str', 7), 0);
  assert.same(Math.imul(7, 'str'), 0);
  assert.same(Math.imul({}, 7), 0);
  assert.same(Math.imul(7, {}), 0);
  assert.same(Math.imul([], 7), 0);
  assert.same(Math.imul(7, []), 0);
  assert.strictEqual(Math.imul(0xFFFFFFFF, 5), -5);
  assert.strictEqual(Math.imul(0xFFFFFFFE, 5), -10);
  assert.strictEqual(Math.imul(2, 4), 8);
  assert.strictEqual(Math.imul(-1, 8), -8);
  assert.strictEqual(Math.imul(-2, -2), 4);
  assert.same(Math.imul(-0, 7), 0);
  assert.same(Math.imul(7, -0), 0);
  assert.same(Math.imul(0.1, 7), 0);
  assert.same(Math.imul(7, 0.1), 0);
  assert.same(Math.imul(0.9, 7), 0);
  assert.same(Math.imul(7, 0.9), 0);
  assert.strictEqual(Math.imul(1.1, 7), 7);
  assert.strictEqual(Math.imul(7, 1.1), 7);
  assert.strictEqual(Math.imul(1.9, 7), 7);
  assert.strictEqual(Math.imul(7, 1.9), 7);
});
